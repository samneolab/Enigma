apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.neolab.enigma"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def signFile = file("../app/keystore.properties")
            def signingProps = new Properties()
            signingProps.load(new FileInputStream(signFile))

            storeFile file("../keystore/neo-enigma-release.jks")
            storePassword signingProps['storePassword']
            keyAlias signingProps['keyAlias']
            keyPassword signingProps['keyPassword']
        }
        debug {
//            storeFile file("../keystore/debug.jks")
        }
    }

    defaultPublishConfig "debug"
    buildTypes {
        debug.initWith(buildTypes.debug)
        vndebug.initWith(buildTypes.debug)

        release {
            minifyEnabled false
            debuggable = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            applicationVariants.all { variant ->
                appendVersionNameVersionCode(variant, defaultConfig)
            }
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.debug
        }
    }
    lintOptions {
        abortOnError false
        lintConfig file('lint.xml')
    }
}

@SuppressWarnings("GroovyAssignabilityCheck")
def appendVersionNameVersionCode(variant, defaultConfig) {
    variant.outputs.each { output ->
        if (variant.buildType.name == android.buildTypes.debug.name) {
            if (output.zipAlign) {
                def file = output.outputFile
                output.outputFile = new File(file.parentFile, variant.buildType.name + "_" + defaultConfig.applicationId + "_v" + defaultConfig.versionName + "." + defaultConfig.versionCode + ".apk")
            }
        } else if (variant.buildType.name == android.buildTypes.release.name) {
            if (output.zipAlign) {
                def file = output.outputFile
                output.outputFile = new File(file.parentFile, variant.buildType.name + "_" + defaultConfig.applicationId + "_v" + defaultConfig.versionName + "." + defaultConfig.versionCode + ".apk")
            }
        }
    }
}

repositories {
    maven {
        url "https://urbanairship.bintray.com/android"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Urban Airship SDK
    // Recommended for in-app messaging
    // Recommended for location services
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.android.support:support-v4:25.2.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.urbanairship.android:urbanairship-sdk:8.3.+'
    compile 'com.android.support:cardview-v7:25.2.0'
    compile 'com.google.android.gms:play-services-location:9.+'
    testCompile 'junit:junit:4.12'
    provided 'org.projectlombok:lombok:1.16.4'
}
